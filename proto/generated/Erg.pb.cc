// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Erg.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "Erg.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace EasyErgsocket {

namespace {

const ::google::protobuf::Descriptor* Erg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Erg_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_Erg_2eproto() {
  protobuf_AddDesc_Erg_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "Erg.proto");
  GOOGLE_CHECK(file != NULL);
  Erg_descriptor_ = file->message_type(0);
  static const int Erg_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Erg, displayedtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Erg, displayedmeters_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Erg, cadence_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Erg, paceinsecs_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Erg, calories_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Erg, power_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Erg, heartrate_),
  };
  Erg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Erg_descriptor_,
      Erg::default_instance_,
      Erg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Erg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Erg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Erg));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_Erg_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Erg_descriptor_, &Erg::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_Erg_2eproto() {
  delete Erg::default_instance_;
  delete Erg_reflection_;
}

void protobuf_AddDesc_Erg_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\tErg.proto\022\rEasyErgsocket\"\216\001\n\003Erg\022\025\n\rdi"
    "splayedTime\030\001 \001(\r\022\027\n\017displayedMeters\030\002 \001"
    "(\r\022\017\n\007cadence\030\003 \001(\r\022\022\n\npaceInSecs\030\004 \001(\r\022"
    "\020\n\010calories\030\005 \001(\r\022\r\n\005power\030\006 \001(\r\022\021\n\thear"
    "trate\030\007 \001(\r", 171);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "Erg.proto", &protobuf_RegisterTypes);
  Erg::default_instance_ = new Erg();
  Erg::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_Erg_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_Erg_2eproto {
  StaticDescriptorInitializer_Erg_2eproto() {
    protobuf_AddDesc_Erg_2eproto();
  }
} static_descriptor_initializer_Erg_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int Erg::kDisplayedTimeFieldNumber;
const int Erg::kDisplayedMetersFieldNumber;
const int Erg::kCadenceFieldNumber;
const int Erg::kPaceInSecsFieldNumber;
const int Erg::kCaloriesFieldNumber;
const int Erg::kPowerFieldNumber;
const int Erg::kHeartrateFieldNumber;
#endif  // !_MSC_VER

Erg::Erg()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:EasyErgsocket.Erg)
}

void Erg::InitAsDefaultInstance() {
}

Erg::Erg(const Erg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:EasyErgsocket.Erg)
}

void Erg::SharedCtor() {
  _cached_size_ = 0;
  displayedtime_ = 0u;
  displayedmeters_ = 0u;
  cadence_ = 0u;
  paceinsecs_ = 0u;
  calories_ = 0u;
  power_ = 0u;
  heartrate_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Erg::~Erg() {
  // @@protoc_insertion_point(destructor:EasyErgsocket.Erg)
  SharedDtor();
}

void Erg::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Erg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Erg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Erg_descriptor_;
}

const Erg& Erg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Erg_2eproto();
  return *default_instance_;
}

Erg* Erg::default_instance_ = NULL;

Erg* Erg::New() const {
  return new Erg;
}

void Erg::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<Erg*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 127) {
    ZR_(displayedtime_, heartrate_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Erg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:EasyErgsocket.Erg)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 displayedTime = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &displayedtime_)));
          set_has_displayedtime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_displayedMeters;
        break;
      }

      // optional uint32 displayedMeters = 2;
      case 2: {
        if (tag == 16) {
         parse_displayedMeters:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &displayedmeters_)));
          set_has_displayedmeters();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_cadence;
        break;
      }

      // optional uint32 cadence = 3;
      case 3: {
        if (tag == 24) {
         parse_cadence:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cadence_)));
          set_has_cadence();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_paceInSecs;
        break;
      }

      // optional uint32 paceInSecs = 4;
      case 4: {
        if (tag == 32) {
         parse_paceInSecs:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &paceinsecs_)));
          set_has_paceinsecs();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_calories;
        break;
      }

      // optional uint32 calories = 5;
      case 5: {
        if (tag == 40) {
         parse_calories:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &calories_)));
          set_has_calories();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_power;
        break;
      }

      // optional uint32 power = 6;
      case 6: {
        if (tag == 48) {
         parse_power:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &power_)));
          set_has_power();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_heartrate;
        break;
      }

      // optional uint32 heartrate = 7;
      case 7: {
        if (tag == 56) {
         parse_heartrate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &heartrate_)));
          set_has_heartrate();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:EasyErgsocket.Erg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:EasyErgsocket.Erg)
  return false;
#undef DO_
}

void Erg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:EasyErgsocket.Erg)
  // optional uint32 displayedTime = 1;
  if (has_displayedtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->displayedtime(), output);
  }

  // optional uint32 displayedMeters = 2;
  if (has_displayedmeters()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->displayedmeters(), output);
  }

  // optional uint32 cadence = 3;
  if (has_cadence()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->cadence(), output);
  }

  // optional uint32 paceInSecs = 4;
  if (has_paceinsecs()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->paceinsecs(), output);
  }

  // optional uint32 calories = 5;
  if (has_calories()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->calories(), output);
  }

  // optional uint32 power = 6;
  if (has_power()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->power(), output);
  }

  // optional uint32 heartrate = 7;
  if (has_heartrate()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->heartrate(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:EasyErgsocket.Erg)
}

::google::protobuf::uint8* Erg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:EasyErgsocket.Erg)
  // optional uint32 displayedTime = 1;
  if (has_displayedtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->displayedtime(), target);
  }

  // optional uint32 displayedMeters = 2;
  if (has_displayedmeters()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->displayedmeters(), target);
  }

  // optional uint32 cadence = 3;
  if (has_cadence()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->cadence(), target);
  }

  // optional uint32 paceInSecs = 4;
  if (has_paceinsecs()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->paceinsecs(), target);
  }

  // optional uint32 calories = 5;
  if (has_calories()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->calories(), target);
  }

  // optional uint32 power = 6;
  if (has_power()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->power(), target);
  }

  // optional uint32 heartrate = 7;
  if (has_heartrate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->heartrate(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:EasyErgsocket.Erg)
  return target;
}

int Erg::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 displayedTime = 1;
    if (has_displayedtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->displayedtime());
    }

    // optional uint32 displayedMeters = 2;
    if (has_displayedmeters()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->displayedmeters());
    }

    // optional uint32 cadence = 3;
    if (has_cadence()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cadence());
    }

    // optional uint32 paceInSecs = 4;
    if (has_paceinsecs()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->paceinsecs());
    }

    // optional uint32 calories = 5;
    if (has_calories()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->calories());
    }

    // optional uint32 power = 6;
    if (has_power()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->power());
    }

    // optional uint32 heartrate = 7;
    if (has_heartrate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->heartrate());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Erg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Erg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Erg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Erg::MergeFrom(const Erg& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_displayedtime()) {
      set_displayedtime(from.displayedtime());
    }
    if (from.has_displayedmeters()) {
      set_displayedmeters(from.displayedmeters());
    }
    if (from.has_cadence()) {
      set_cadence(from.cadence());
    }
    if (from.has_paceinsecs()) {
      set_paceinsecs(from.paceinsecs());
    }
    if (from.has_calories()) {
      set_calories(from.calories());
    }
    if (from.has_power()) {
      set_power(from.power());
    }
    if (from.has_heartrate()) {
      set_heartrate(from.heartrate());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Erg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Erg::CopyFrom(const Erg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Erg::IsInitialized() const {

  return true;
}

void Erg::Swap(Erg* other) {
  if (other != this) {
    std::swap(displayedtime_, other->displayedtime_);
    std::swap(displayedmeters_, other->displayedmeters_);
    std::swap(cadence_, other->cadence_);
    std::swap(paceinsecs_, other->paceinsecs_);
    std::swap(calories_, other->calories_);
    std::swap(power_, other->power_);
    std::swap(heartrate_, other->heartrate_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Erg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Erg_descriptor_;
  metadata.reflection = Erg_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace EasyErgsocket

// @@protoc_insertion_point(global_scope)
